<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.hworld.base.dao.DirectDAO">
  
  	<sql id="search">
		<where>
			<if test="kind=='directName'">
				TITLE LIKE CONCAT('%',#{search},'%')
			</if>
			<if test="kind=='dircetContents'">
				CONTENTS LIKE CONCAT('%',#{search},'%')
			</if>
			<if test="kind=='slicedCode'">
				CONTENTS LIKE CONCAT('%',#{search},'%')
			</if>
		</where>
	</sql>
  
  	<select id="getList" resultType="DirectVO" parameterType="Pager">
    SELECT SUBSTRING(D.directCode, -5) AS slicedCode,
        D.*,
        MIN(D.DIRECTPRICE) AS INITPRICE,
        AVG(R.RATE) AS rate
	    FROM DIRECT D
	    LEFT JOIN ORDERDIRECT OD ON SUBSTRING(D.directCode, -5) = SUBSTRING(OD.DIRECTCODE, -5)
	    LEFT JOIN REVIEW R ON OD.ORDERNUM = R.ORDERNUM
	   	WHERE SUBSTRING(D.directCode, 1, 3) = 'P01'
	    GROUP BY SUBSTRING(D.DIRECTCODE, -5), D.DIRECTNAME, D.DIRECTCONTENTS
	    <choose>
	        <when test="sortType == 'priceHigh'">
	            ORDER BY INITPRICE DESC
	        </when>
	        <when test="sortType == 'priceLow'">
	            ORDER BY INITPRICE ASC
	        </when>
	        <otherwise>
	            ORDER BY D.UPLOADDATE DESC
	        </otherwise>
	    </choose>
	    LIMIT #{startRow}, #{perPage}
	</select>
	
  	<select id="getAccList" resultType="DirectVO" parameterType="Pager">
    SELECT SUBSTRING(D.directCode, -5) AS slicedCode,
	    D.*,
	    MIN(D.DIRECTPRICE) AS INITPRICE,
	    AVG(R.RATE) AS rate
	    FROM DIRECT D
	    LEFT JOIN ORDERDIRECT OD ON SUBSTRING(D.directCode, -5) = SUBSTRING(OD.DIRECTCODE, -5)
	    LEFT JOIN REVIEW R ON OD.ORDERNUM = R.ORDERNUM
	    WHERE NOT SUBSTRING(D.directCode, 1, 3) = 'P01'
	    GROUP BY SUBSTRING(D.directCode, -5), D.DIRECTNAME, D.DIRECTCONTENTS
	    <choose>
	        <when test="sortType == 'priceHigh'">
	            ORDER BY INITPRICE DESC
	        </when>
	        <when test="sortType == 'priceLow'">
	            ORDER BY INITPRICE ASC
	        </when>
	        <otherwise>
	            ORDER BY D.UPLOADDATE DESC
	        </otherwise>
	    </choose>
	    LIMIT #{startRow}, #{perPage}
	</select>



	<!-- 상품 개수 -->  	
	<select id="getTotalCount" parameterType="Pager" resultType="Long">
		SELECT COUNT(DIRECTCODE) FROM DIRECT
		<include refid="search"></include>
	</select> 
	
	<!-- 휴대폰 상품 디테일 페이지 상품 하나 다중 옵션 리스트-->
	<select id="getDetail" parameterType="DirectVO" resultType="DirectVO"> 
	   SELECT D.*, CC.VALUE AS value, RIGHT(D.DIRECTCODE, 5) AS slicedCode
		FROM DIRECT D
		INNER JOIN COMMONCODE CC ON D.BRANDCODE = CC.CODE
		WHERE RIGHT(D.DIRECTCODE, 5) = #{slicedCode} AND SUBSTRING(D.DIRECTCODE, 1, 3)='P01'
		ORDER BY D.DIRECTPRICE ASC
	</select>
	
	<!-- 휴대폰 디테일 월 예상 요금 계산 프로시저 호출 -->
	<!-- parameter 이름은 바꿔서 넣어도 됨, 단 순서는 지켜야한다. 1=directCode, 2=disKind, 3=planNum, 4=월기기가격, 5=월요금가격 -->
	<select id="getMonthlyPay" statementType="CALLABLE" parameterType="hashMap" resultType="hashMap">
		{
			CALL calc_monthlyPay (
				#{directCode, mode=IN, jdbcType=VARCHAR, javaType=STRING},
				#{disKind, mode=IN, jdbcType=INTEGER, javaType=INTEGER},
				#{planNum, mode=IN, jdbcType=VARCHAR, javaType=STRING},
				#{out_phonePayPrice, mode=OUT, jdbcType=INTEGER, javaType=INTEGER},
				#{out_planPrice, mode=OUT, jdbcType=INTEGER, javaType=INTEGER}   
			)
		}
	</select>
	<!-- 휴대폰 주문시 기기변경 기존 회원 대표회선 휴대폰번호 가져오기 -->
	<select id="getKingPhoneNum" resultType="PlanVO" parameterType="Integer">
		SELECT T.PHONENUM FROM MEMBER M
		INNER JOIN TELEPHONE T ON T.MEMBERNUM = M.MEMBERNUM 
		WHERE M.MEMBERNUM = #{memberNum} AND T.KINGCHECK =1;
	</select>
	
	<!-- useGenerateKeys를 사용하고, 해당 옵션으로 생성된 값을 넣을 변수명을 keyProperty에 입력해준다. 값이 생성되었으므로 아래의 쿼리문을 사용한다. -->
	<insert id="setFormAdd" parameterType="ApplicationVO" useGeneratedKeys="true" keyProperty="appNum">
		INSERT INTO APPLICATIONFORM(APPNUM, NAME, RRNF, RRNL, ADDRESS1, ADDRESS2, ADDRESS3, PLANNUM, PHONENUM, DISKIND, PHONESUBPRICE, STARTDATE, DIRECTNAME, DIRECTCODE, RRNLORIGIN)
		VALUES(#{appNum}, #{name}, #{rrnf}, #{rrnl}, #{address1}, #{address2}, #{address3}, #{planNum}, #{phoneNum}, #{disKind}, 0, NOW(), #{directName}, #{directCode}, #{rrnlOrigin})
	</insert>
	
	
	<!-- 상품 구매 완료 후 회원 정보 불러오는 -->
	<select id="getDirectName" resultType="String" parameterType="Integer">
	SELECT directName FROM APPLICATIONFORM A
 	INNER JOIN MEMBER M ON A.NAME = M.NAME AND A.RRNF = M.RRNF AND M.RRNL = A.RRNL
	WHERE MEMBERNUM = #{memberNum}
	ORDER BY A.APPNUM DESC
	LIMIT 1
	</select>
	
	<!-- 신규가입 상품 구매 완료 후 회원 정보 불러오는 -->
	<select id="getMemberPlan" resultType="PlanVO" parameterType="Integer">
		SELECT P.PLANNUM, P.PLANNAME, P.PLANPRICE, P.DATACAPACITY, M.MEMBERNUM, T.SERIALNUM , T.PHONENUM, T.KINGCHECK FROM PLAN P
		JOIN TELEPHONE T ON T.PLANNUM = P.PLANNUM 
		JOIN MEMBER M ON T.MEMBERNUM = M.MEMBERNUM
		WHERE M.MEMBERNUM = #{memberNum} 
		ORDER BY SERIALNUM DESC
		LIMIT 1;
	</select>
	
	<!-- 번이 / 기변 상품 구매 완료 후 회원 정보 불러오는 -->
	<!-- <select id="getMemberPlan" resultType="PlanVO" parameterType="Integer">
		SELECT P.PLANNUM, P.PLANNAME, P.PLANPRICE, P.DATACAPACITY, M.MEMBERNUM, T.SERIALNUM , T.PHONENUM, T.KINGCHECK FROM PLAN P
		JOIN TELEPHONE T ON T.PLANNUM = P.PLANNUM 
		JOIN MEMBER M ON T.MEMBERNUM = M.MEMBERNUM
		WHERE M.MEMBERNUM = #{memberNum} AND T.KINGCHECK = 1
	</select> -->
	
	<update id="setOwnCheck" parameterType="Integer">
	UPDATE TELEPHONE T
	INNER JOIN MEMBER M ON M.MEMBERNUM = #{memberNum}
	SET M.ownCheck = 1
	WHERE T.PHONENUM IS NOT NULL
  	AND T.SERIALNUM IS NOT NULL
	</update>
	
	
	
	<!-- 신청서VO의 주민번호와 회원 테이블의 주민번호가 일치하는 정보가 있는지 확인 -->
	<select id="getMemberSearch" parameterType="ApplicationVO" resultType="MemberVO">
		SELECT MEMBERNUM FROM MEMBER
		WHERE RRNF = #{rrnf} AND RRNL = #{rrnl}
	</select>
	<!-- 번호이동 타통신사 조회 -->
	<select id="isOtherTelecom" resultType="String" parameterType="String">
	SELECT * FROM OTHERTELECOM
	WHERE TAPHONENUM = #{phoneNum} 
	</select>
	
	<!-- 전화번호 중복 체크 -->
	<select id="checkPhoneNum" parameterType="String" resultType="String">
		 SELECT
        CASE
            WHEN EXISTS (
                SELECT T.phoneNum
                FROM TELEPHONE T
                INNER JOIN MEMBER M ON T.MEMBERNUM = M.MEMBERNUM
                WHERE T.PHONENUM = #{phoneNum} AND M.RRNF = #{rrnf} AND M.RRNL = #{rrnl} AND M.NAME=#{name}
             ) OR EXISTS (
            SELECT T.phoneNum
            FROM TELEPHONE T
            INNER JOIN MEMBER M ON T.MEMBERNUM = M.MEMBERNUM
            WHERE T.PHONENUM = #{phoneNum} 
        ) THEN 'own'
            WHEN EXISTS (
                SELECT taPhoneNum
                FROM OTHERTELECOM
                WHERE taPhoneNum = #{phoneNum}
            ) THEN 'other'
            ELSE 'able'
        END AS phoneNum
	</select>
	
	
	<!-- 프로시저 호출, memberNum, appNum만 입력해주면 계산해줌 -->
	<!-- parameter 이름은 바꿔서 넣어도 됨, 단 순서는 지켜야한다. 1=directCode, 2=disKind, 3=planNum, 4=월기기가격, 5=월요금가격 -->
	<insert id="setTelephoneInitAdd" statementType="CALLABLE" parameterType="HashMap">
		{
			CALL insert_telephone (
				#{appNum, mode=IN, jdbcType=INTEGER, javaType=INTEGER},
				#{memberNum, mode=IN, jdbcType=INTEGER, javaType=INTEGER}
			)
		}
	</insert>
	
	
	<!-- 악세사리 상품 디테일 페이지 상품 하나 다중 옵션 리스트 -->
	<select id="getAccDetail" parameterType="DirectVO" resultType="DirectVO"> 
	   SELECT D.*, CC.VALUE AS value, RIGHT(D.DIRECTCODE, 5) AS slicedCode
		FROM DIRECT D
		INNER JOIN COMMONCODE CC ON D.BRANDCODE = CC.CODE 
		WHERE RIGHT(D.DIRECTCODE, 5) = #{slicedCode} AND SUBSTRING(D.DIRECTCODE,1,3) <![CDATA[<>]]> 'P01'
		ORDER BY D.DIRECTPRICE ASC
	</select>

	<!-- 상품 등록 --> 	
	<insert id="setInsert" parameterType="DirectVO">
		INSERT INTO DIRECT(DIRECTCODE, DIRECTNAME, DIRECTCONTENTS, DIRECTPRICE, DIRECTSTOCK, CATEGORYCODE, BRANDCODE, COLORCODE, SAVECAPACITY, UPLOADDATE)
		VALUES (#{directCode}, #{directName}, #{directContents}, #{directPrice}, #{directStock}, #{categoryCode}, #{brandCode}, #{colorCode}, #{saveCapacity}, now())
	</insert>
	 	
  	<!-- 상품 삭제 -->
	<delete id="setDelete" parameterType="DirectVO">
    DELETE FROM DIRECT
    WHERE SUBSTRING(DIRECTCODE, -5) = #{slicedCode}
	</delete>
	
	<!-- 상품 수정 -->
	<update id="setUpdate" parameterType="DirectVO">
		UPDATE DIRECT
		SET DIRECTNAME = #{directName}, DIRECTCONTENTS = #{directContents}, DIRECTPRICE = #{directPrice}, DIRECTSTOCK = #{directStock}, CATEGORYCODE = #{categoryCode}, BRANDCODE = #{brandCode}, COLORCODE = #{colorCode}, SAVECAPACITY = #{saveCapacity}
		WHERE RIGHT(DIRECTCODE, 5) = #{slicedCode}
	</update>
	
	
	<!-- 총 리뷰 가져오기 -->
	<select id="getReview" resultType="ReviewVO" parameterType="DirectVO">
	 	SELECT R.*, M.EMAIL AS email, D.DIRECTNAME, SUBSTRING(D.DIRECTCODE, -5) AS slicedCode, D.CATEGORYCODE AS categoryCode 
		FROM REVIEW R
		LEFT JOIN ORDERDIRECT OD ON OD.ORDERNUM = R.ORDERNUM
		LEFT JOIN DIRECT D ON D.DIRECTCODE =OD.DIRECTCODE
		LEFT JOIN MEMBER M ON R.MEMBERNUM = M.MEMBERNUM
		HAVING slicedCode = #{slicedCode}
		ORDER BY R.REGDATE DESC;
	</select>

	<!-- 리뷰 총 개수 가져오기 -->
	<select id="getReviewCount" parameterType="DirectVO" resultType="Long">
		SELECT COUNT(R.NUM), SUBSTRING(D.DIRECTCODE,-5) AS slicedCode, D.CATEGORYCODE AS categoryCode 
		FROM REVIEW R
		LEFT JOIN ORDERDIRECT OD ON OD.ORDERNUM = R.ORDERNUM
		INNER JOIN DIRECT D ON D.DIRECTCODE = OD.DIRECTCODE
		WHERE SUBSTRING(D.DIRECTCODE,-5) =#{slicedCode}
	</select> 
	<!-- 리뷰 작성 -->
	<insert id="setReviewAdd" parameterType="ReviewVO">
		INSERT INTO REVIEW (MEMBERNUM, ORDERNUM, CONTENTS, RATE, REGDATE)
		VALUES (#{memberNum}, #{orderNum}, #{contents}, #{rate}, now())
	</insert> 
	<!-- 리뷰 수정 -->
	<update id="setReviewUpdate" parameterType="ReviewVO">
		UPDATE REVIEW
		SET CONTENTS=#{contents}, RATE=#{rate}
		WHERE NUM=#{num}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="setReviewDelete" parameterType="ReviewVO">
		DELETE FROM REVIEW
		WHERE NUM=#{num}
	</delete>
	
	<!-- 상품문의 -->
	<select id="getDirectQna" resultType="QnaVO" parameterType="QnaVO">
		SELECT DISTINCT Q.*, M.EMAIL AS email, SUBSTRING(D.DIRECTCODE,1,3) AS newCode
		FROM QNA Q
		LEFT JOIN MEMBER M ON M.MEMBERNUM =Q.MEMBERNUM
		INNER JOIN DIRECT D ON SUBSTRING(D.DIRECTCODE,-5) = Q.SLICEDCODE  
		WHERE SLICEDCODE =#{slicedCode}
	</select>
	
	<!-- 상품문의 추가 -->
	<insert id="setQnaAdd" parameterType="QnaVO">
	INSERT INTO QNA (MEMBERNUM, SLICEDCODE, ORDERNUM, SERIALNUM, TITLE, CONTENTS, REPLY, REGDATE, STATE, CATEGORYCODE, FILEPATH, REPLYDATE)
	VALUES(#{memberNum}, #{slicedCode} ,NULL, NULL, NULL, #{contents}, NULL, now(), 0, '00', NULL, NULL);
	</insert>
	
	<!-- 상품문의 답글 업데이트 -->
	<update id="setReplyAdd" parameterType="QnaVO">
		UPDATE QNA
		SET REPLY=#{reply}, REPLYDATE=now(), STATE=1
		WHERE NUM=#{num}
	</update>
	
	
	<!-- Plan -->
	<!-- existPlanList -->
	<select id="getExistPlanList" resultType="PlanVO">
		SELECT DISTINCT C.NOTE
		FROM PLAN P
		INNER JOIN COMMONCODE C ON SUBSTRING(P.PLANNUM, 1, 1) = C.TYPE
	</select>
	
	<!-- planList + disPercent -->
	<select id="getPlanList" resultType="PlanVO">
		SELECT P.PLANNUM, P.PLANNAME, P.PLANPRICE, P.DATACAPACITY, P.CATEGORYCODE, P.PLANEXPLAIN, P.PLANEXPLAINS, D.DISPERCENT 
		FROM PLAN P
		LEFT JOIN DISCODE D
		ON(P.DISCODE=D.DISCODE)
		WHERE PLANNUM LIKE 'G%' OR PLANNUM LIKE 'S%' OR PLANNUM LIKE 'T%' OR PLANNUM LIKE 'Z%' OR PLANNUM LIKE 'W%' OR PLANNUM LIKE 'H%'
	</select>
	
	<!-- 선택한 요금제 -->
	<select id="getSelectedPlan" resultType="PlanVO" parameterType="PlanVO">
	SELECT * FROM PLAN
	WHERE PLANNUM = #{planNum}
	</select>
	
  </mapper>