<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.hworld.base.dao.ApplicationDAO">
	
	<!-- 신청서 테이블에 insert -->
	<!-- 'auto-increment로 발생한 수를 num에 넣어주세요' 라는 의미 -->
	<!-- useGenerateKeys를 사용하고, 해당 옵션으로 생성된 값을 넣을 변수명을 keyProperty에 입력해준다. 값이 생성되었으므로 아래의 쿼리문을 사용한다. -->
	<insert id="setFormAdd" parameterType="ApplicationVO" useGeneratedKeys="true" keyProperty="appNum">
		INSERT INTO APPLICATIONFORM(APPNUM, NAME, RRNF, RRNL, ADDRESS1, ADDRESS2, ADDRESS3, PLANNUM, PHONENUM, DISKIND, PHONESUBPRICE, STARTDATE, DIRECTNAME, DIRECTCODE, RRNLORIGIN)
		VALUES(#{appNum}, #{name}, #{rrnf}, #{rrnl}, #{address1}, #{address2}, #{address3}, #{planNum}, #{phoneNum}, #{disKind}, 0, NOW(), #{directName}, #{directCode}, #{rrnlOrigin})
	</insert>
	
	<!-- 신청서VO의 주민번호와 회원 테이블의 주민번호가 일치하는 정보가 있는지 확인 -->
	<select id="getMemberSearch" parameterType="ApplicationVO" resultType="MemberVO">
		SELECT MEMBERNUM FROM MEMBER
		WHERE RRNF = #{rrnf} AND RRNL = #{rrnl}
	</select>
	
	<!-- 신청서VO 기반 회원에 정보 입력 -->
	<!-- MEMBERSTATE -1:휴면, 0:일시정지, 1:정상, 2:탈퇴 / ADMINCHECK 0:ADMIN, 1:MEMBER -->
	<insert id="setMemberInitAdd" parameterType="ApplicationVO" useGeneratedKeys="true" keyProperty="memberNum">
		INSERT INTO MEMBER(MEMBERNUM, EMAIL, PW, NAME, ADDRESS1, ADDRESS2, ADDRESS3, RRNF, RRNL, JOINDATE, MEMBERSTATE, ADMINCHECK, TEL, OWNCHECK)
		VALUES(#{memberNum}, NULL, NULL, #{name}, #{address1}, #{address2}, #{address3}, #{rrnf}, #{rrnl}, NOW(), NULL, '1', NULL, '1')
	</insert>
	
	<!-- 신청서VO 기반 회선에 정보 입력 -->
	<!-- 파라미터가 다른 정보들은 이어서 update // serialNum이 제일 큰 telephone tuple에 업데이트 시행하면 될거같긴했는데.. -->
	<!-- <insert id="setTelephoneInitAdd" parameterType="ApplicationVO">
		INSERT INTO TELEPHONE(SERIALNUM, PLANNUM, MEMBERNUM, APPNUM, PHONENUM, CONTRACTDATE, EXPIREDATE, DIRECTNAME, ENDDATE, KINGCHECK, PHONEORIPRICE, PHONESUBPRICE, PHONETOTALPRICE, PHONEBALANCE, STOPSTARTDATE, STOPENDDATE, DISKIND)
		VALUES(NULL, #{planNum}, #{memberNum}, #{appNum}, #{phoneNum}, NULL, NULL, #{directName}, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, #{disKind})
	</insert> -->
	<!-- 프로시저 호출, memberNum, appNum만 입력해주면 계산해줌 -->
	<!-- parameter 이름은 바꿔서 넣어도 됨, 단 순서는 지켜야한다. 1=directCode, 2=disKind, 3=planNum, 4=월기기가격, 5=월요금가격 -->
	<insert id="setTelephoneInitAdd" statementType="CALLABLE" parameterType="HashMap">
		{
			CALL insert_telephone (
				#{appNum, mode=IN, jdbcType=INTEGER, javaType=INTEGER},
				#{memberNum, mode=IN, jdbcType=INTEGER, javaType=INTEGER}
			)
		}
	</insert>
	
	<!-- Plan -->
	<!-- existPlanList -->
	<select id="getExistPlanList" resultType="PlanVO">
		SELECT DISTINCT C.NOTE
		FROM PLAN P
		INNER JOIN COMMONCODE C ON SUBSTRING(P.PLANNUM, 1, 1) = C.TYPE
	</select>
	
	<!-- planList + disPercent -->
	<select id="getPlanList" resultType="PlanVO">
		SELECT P.PLANNUM, P.PLANNAME, P.PLANPRICE, P.DATACAPACITY, P.CATEGORYCODE, P.PLANEXPLAIN, P.PLANEXPLAINS, D.DISPERCENT 
		FROM PLAN P
		LEFT JOIN DISCODE D
		ON(P.DISCODE=D.DISCODE)
		WHERE PLANNUM LIKE 'G%' OR PLANNUM LIKE 'S%' OR PLANNUM LIKE 'T%' OR PLANNUM LIKE 'Z%' OR PLANNUM LIKE 'W%' OR PLANNUM LIKE 'H%'
	</select>
	
	
	<!-- Direct -->
	<!-- getDirectList -->
	<select id="getDirectList" resultType="DirectVO">
		SELECT DIRECTCODE, RIGHT(DIRECTCODE, 5) AS slicedCode, DIRECTNAME, DIRECTSTOCK
		FROM DIRECT
		WHERE DIRECTCODE LIKE 'P01%'
		GROUP BY slicedCode
	</select>
	
	<!-- getSelectedDirectList -->
	<select id="getSelectedDirectList" resultType="DirectVO" parameterType="DirectVO">
		SELECT DIRECTCODE, RIGHT(DIRECTCODE, 5) AS slicedCode, DIRECTPRICE, COLORCODE, SAVECAPACITY
		FROM DIRECT
		WHERE DIRECTCODE LIKE 'P01%' AND DIRECTSTOCK != 0 AND RIGHT(DIRECTCODE, 5) = #{slicedCode}
	</select>
	
	
	<!-- MonthlyCost -->
	<!-- parameter 이름은 바꿔서 넣어도 됨, 단 순서는 지켜야한다. 1=directCode, 2=disKind, 3=planNum, 4=월기기가격, 5=월요금가격 -->
	<select id="getMonthlyPay" statementType="CALLABLE" parameterType="hashMap" resultType="hashMap">
		{
			CALL calc_monthlyPay (
				#{directCode, mode=IN, jdbcType=VARCHAR, javaType=STRING},
				#{disKind, mode=IN, jdbcType=INTEGER, javaType=INTEGER},
				#{planNum, mode=IN, jdbcType=VARCHAR, javaType=STRING},
				#{out_phonePayPrice, mode=OUT, jdbcType=INTEGER, javaType=INTEGER},
				#{out_planPrice, mode=OUT, jdbcType=INTEGER, javaType=INTEGER}   
			)
		}
	</select>
	
		
	<!-- isDuplicatePhoneNum -->
	<!-- 전화번호 중복 체크 -->
	<select id="isDuplicatePhoneNum" parameterType="String" resultType="String">
		SELECT PHONENUM FROM TELEPHONE
		WHERE PHONENUM=#{phoneNum}
	</select>

</mapper>